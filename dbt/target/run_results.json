{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.11", "generated_at": "2025-09-17T16:00:32.433873Z", "invocation_id": "71ade48a-5b1c-4ee9-bfe3-43158fb01063", "invocation_started_at": "2025-09-17T16:00:10.523949Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-17T16:00:23.751158Z", "completed_at": "2025-09-17T16:00:23.773129Z"}, {"name": "execute", "started_at": "2025-09-17T16:00:23.776120Z", "completed_at": "2025-09-17T16:00:24.846313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1507468223571777, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.crypto_analytics.stg_pipeline_runs", "compiled": true, "compiled_code": "SELECT\n    id AS run_id,\n    run_id AS run_identifier,\n    stage,\n    status,\n    records_processed,\n    error_message,\n    started_at,\n    completed_at,\n    CASE\n        WHEN completed_at IS NOT NULL\n            THEN EXTRACT(EPOCH FROM (completed_at - started_at))\n    END AS duration_seconds\nFROM \"crypto_warehouse\".\"public\".\"pipeline_runs\"", "relation_name": "\"crypto_warehouse\".\"public_staging\".\"stg_pipeline_runs\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-17T16:00:23.719946Z", "completed_at": "2025-09-17T16:00:23.783440Z"}, {"name": "execute", "started_at": "2025-09-17T16:00:23.806524Z", "completed_at": "2025-09-17T16:00:25.188873Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4944188594818115, "adapter_response": {"_message": "SELECT 10", "code": "SELECT", "rows_affected": 10}, "message": "SELECT 10", "failures": null, "unique_id": "model.crypto_analytics.stg_crypto_prices", "compiled": true, "compiled_code": "\n\nWITH source_data AS (\n    SELECT\n        id AS price_id,\n        current_price AS price_usd,\n        market_cap,\n        total_volume AS volume_24h,\n        price_change_24h,\n        price_change_percentage_24h AS price_change_pct_24h,\n        market_cap_rank,\n        extracted_at,\n        created_at,\n        UPPER(TRIM(symbol)) AS symbol,\n        TRIM(name) AS crypto_name,\n\n        COALESCE(current_price <= 0, FALSE) AS is_invalid_price,\n        COALESCE(market_cap <= 0, FALSE) AS is_invalid_market_cap,\n        COALESCE(total_volume < 0, FALSE) AS is_invalid_volume\n    FROM \"crypto_warehouse\".\"public\".\"crypto_prices_raw\"\n),\n\ncleaned_data AS (\n    SELECT\n        *,\n        DATE(extracted_at) AS extraction_date,\n        DATE_TRUNC('hour', extracted_at) AS extraction_hour,\n        CASE\n            WHEN LAG(price_usd) OVER (\n                PARTITION BY symbol ORDER BY extracted_at\n            ) IS NOT NULL THEN\n                ((price_usd - LAG(price_usd) OVER (\n                    PARTITION BY symbol ORDER BY extracted_at\n                )) / LAG(price_usd) OVER (\n                    PARTITION BY symbol ORDER BY extracted_at\n                )) * 100\n        END AS price_change_pct_from_previous\n    FROM source_data\n    WHERE NOT is_invalid_price AND NOT is_invalid_volume\n)\n\nSELECT * FROM cleaned_data", "relation_name": "\"crypto_warehouse\".\"public_staging\".\"stg_crypto_prices\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-17T16:00:25.005246Z", "completed_at": "2025-09-17T16:00:25.037068Z"}, {"name": "execute", "started_at": "2025-09-17T16:00:25.040978Z", "completed_at": "2025-09-17T16:00:30.568770Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.605138778686523, "adapter_response": {"_message": "SELECT 5", "code": "SELECT", "rows_affected": 5}, "message": "SELECT 5", "failures": null, "unique_id": "model.crypto_analytics.mart_pipeline_monitoring", "compiled": true, "compiled_code": "\n\nWITH pipeline_metrics AS (\n    SELECT\n        run_id,\n        stage,\n        status,\n        records_processed,\n        error_message,\n        started_at,\n        completed_at,\n        EXTRACT(EPOCH FROM completed_at - started_at) AS duration_seconds,\n\n        -- Flag to compute success rate\n        CASE WHEN status = 'success' THEN 1 ELSE 0 END AS is_success,\n\n        -- Classify performance\n        CASE\n            WHEN completed_at IS NULL THEN 'Running'\n            WHEN EXTRACT(EPOCH FROM completed_at - started_at) < 30 THEN 'Fast'\n            WHEN\n                EXTRACT(EPOCH FROM completed_at - started_at) < 120\n                THEN 'Normal'\n            ELSE 'Slow'\n        END AS performance_category\n\n    FROM \"crypto_warehouse\".\"public_staging\".\"stg_pipeline_runs\"\n),\n\nlatest_status_per_day_stage AS (\n    SELECT\n        stage,\n        DATE(started_at) AS run_date,\n        FIRST_VALUE(status) OVER (\n            PARTITION BY DATE(started_at), stage\n            ORDER BY started_at DESC\n        ) AS latest_run_status\n    FROM pipeline_metrics\n),\n\ndaily_summary AS (\n    SELECT\n        stage,\n        DATE(started_at) AS run_date,\n\n        COUNT(*) AS total_runs,\n        SUM(is_success) AS successful_runs,\n        SUM(records_processed) AS total_records_processed,\n        AVG(duration_seconds) AS avg_duration_seconds,\n        MAX(duration_seconds) AS max_duration_seconds,\n        ROUND(\n            ((SUM(is_success)::FLOAT / COUNT(*)) * 100)::NUMERIC, 2\n        ) AS success_rate_pct\n\n\n    FROM pipeline_metrics\n    WHERE started_at >= CURRENT_DATE - INTERVAL '30 days'\n    GROUP BY DATE(started_at), stage\n)\n\n-- Final result combining metrics with latest run status\nSELECT\n    ds.*,\n    ls.latest_run_status\nFROM daily_summary AS ds\nLEFT JOIN latest_status_per_day_stage AS ls\n    ON ds.run_date = ls.run_date AND ds.stage = ls.stage", "relation_name": "\"crypto_warehouse\".\"public_marts\".\"mart_pipeline_monitoring\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-17T16:00:25.300553Z", "completed_at": "2025-09-17T16:00:25.336250Z"}, {"name": "execute", "started_at": "2025-09-17T16:00:25.345904Z", "completed_at": "2025-09-17T16:00:31.567088Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.326121091842651, "adapter_response": {"_message": "SELECT 5", "code": "SELECT", "rows_affected": 5}, "message": "SELECT 5", "failures": null, "unique_id": "model.crypto_analytics.mart_crypto_latest_prices", "compiled": true, "compiled_code": "\n\nWITH latest_prices AS (\n    SELECT\n        symbol,\n        crypto_name,\n        price_usd,\n        market_cap,\n        volume_24h,\n        price_change_24h,\n        price_change_pct_24h,\n        market_cap_rank,\n        extracted_at,\n\n        ROW_NUMBER() OVER (\n            PARTITION BY symbol\n            ORDER BY extracted_at DESC\n        ) AS rn\n\n    FROM \"crypto_warehouse\".\"public_staging\".\"stg_crypto_prices\"\n    WHERE extraction_date = CURRENT_DATE\n),\n\nprice_changes AS (\n    SELECT\n        symbol,\n        crypto_name,\n        price_usd AS current_price,\n        market_cap,\n        volume_24h,\n        price_change_24h,\n        price_change_pct_24h,\n        market_cap_rank,\n        extracted_at AS last_updated,\n\n        -- Calculate additional metrics\n        CASE\n            WHEN price_change_pct_24h > 10 THEN 'Strong Gain'\n            WHEN price_change_pct_24h > 5 THEN 'Moderate Gain'\n            WHEN price_change_pct_24h > 0 THEN 'Slight Gain'\n            WHEN price_change_pct_24h > -5 THEN 'Slight Loss'\n            WHEN price_change_pct_24h > -10 THEN 'Moderate Loss'\n            ELSE 'Strong Loss'\n        END AS price_trend_category,\n\n        -- Market cap category\n        CASE\n            WHEN market_cap_rank <= 10 THEN 'Large Cap'\n            WHEN market_cap_rank <= 50 THEN 'Mid Cap'\n            WHEN market_cap_rank <= 100 THEN 'Small Cap'\n            ELSE 'Micro Cap'\n        END AS market_cap_category\n\n    FROM latest_prices\n    WHERE rn = 1\n)\n\nSELECT * FROM price_changes", "relation_name": "\"crypto_warehouse\".\"public_marts\".\"mart_crypto_latest_prices\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-17T16:00:25.388208Z", "completed_at": "2025-09-17T16:00:25.497063Z"}, {"name": "execute", "started_at": "2025-09-17T16:00:25.499222Z", "completed_at": "2025-09-17T16:00:32.363226Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 6.985801696777344, "adapter_response": {"_message": "SELECT 5", "code": "SELECT", "rows_affected": 5}, "message": "SELECT 5", "failures": null, "unique_id": "model.crypto_analytics.mart_crypto_hourly_performance", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__int_crypto_hourly_aggs as (\n\n\nWITH base_data AS (\n    SELECT\n        symbol,\n        crypto_name,\n        price_usd,\n        volume_24h,\n        market_cap,\n        DATE_TRUNC('hour', extracted_at) AS extraction_hour,\n        CASE WHEN price_usd <= 0 THEN 1 ELSE 0 END AS is_invalid\n    FROM \"crypto_warehouse\".\"public_staging\".\"stg_crypto_prices\"\n)\n\nSELECT\n    symbol,\n    crypto_name,\n    extraction_hour,\n    COUNT(*) AS total_records,\n    SUM(is_invalid) AS invalid_price_records,\n    AVG(price_usd) AS avg_price_usd,\n    MIN(price_usd) AS min_price_usd,\n    MAX(price_usd) AS max_price_usd,\n    STDDEV(price_usd) AS price_volatility,\n    AVG(volume_24h) AS avg_volume_24h,\n    AVG(market_cap) AS avg_market_cap\nFROM base_data\nGROUP BY symbol, crypto_name, extraction_hour\n), hourly_data AS (\n    SELECT\n        symbol,\n        crypto_name,\n        extraction_hour,\n        avg_price_usd,\n        min_price_usd,\n        max_price_usd,\n        price_volatility,\n        avg_volume_24h,\n        avg_market_cap,\n        total_records,\n\n        -- Calculate hourly change\n        LAG(avg_price_usd) OVER (\n            PARTITION BY symbol\n            ORDER BY extraction_hour\n        ) AS previous_hour_price,\n\n        -- Data quality score\n        (1.0 - (invalid_price_records::FLOAT / GREATEST(total_records, 1)))\n        * 100 AS data_quality_score\n\n    FROM __dbt__cte__int_crypto_hourly_aggs\n),\n\nperformance_metrics AS (\n    SELECT\n        *,\n        CASE\n            WHEN previous_hour_price IS NOT NULL AND previous_hour_price > 0\n                THEN\n                    (\n                        (avg_price_usd - previous_hour_price)\n                        / previous_hour_price\n                    )\n                    * 100\n        END AS hourly_change_pct,\n\n        -- Volatility category\n        CASE\n            WHEN price_volatility IS NULL THEN 'Unknown'\n            WHEN price_volatility < avg_price_usd * 0.01 THEN 'Low Volatility'\n            WHEN\n                price_volatility < avg_price_usd * 0.05\n                THEN 'Medium Volatility'\n            ELSE 'High Volatility'\n        END AS volatility_category\n\n    FROM hourly_data\n)\n\nSELECT * FROM performance_metrics", "relation_name": "\"crypto_warehouse\".\"public_marts\".\"mart_crypto_hourly_performance\"", "batch_results": null}], "elapsed_time": 10.89865255355835, "args": {"require_yaml_configuration_for_mf_time_spines": false, "log_level": "info", "log_level_file": "debug", "validate_macro_args": false, "populate_cache": true, "log_format": "default", "defer": false, "printer_width": 80, "send_anonymous_usage_stats": true, "write_json": true, "require_batched_execution_for_custom_microbatch_strategy": false, "log_file_max_bytes": 10485760, "select": [], "static_parser": true, "state_modified_compare_more_unrendered_values": false, "which": "run", "exclude": [], "log_path": "/app/dbt/logs", "partial_parse_file_diff": true, "cache_selected_only": false, "partial_parse": true, "vars": {}, "favor_state": false, "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_vars": false, "require_resource_names_without_spaces": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "use_fast_test_edges": false, "introspect": true, "version_check": true, "require_explicit_package_overrides_for_builtin_materializations": true, "require_generic_test_arguments_property": true, "print": true, "indirect_selection": "eager", "show_resource_report": false, "upload_to_artifacts_ingest_api": false, "profiles_dir": "/app", "strict_mode": false, "require_nested_cumulative_type_params": false, "use_colors": true, "require_all_warnings_handled_by_warn_error": false, "use_colors_file": true, "empty": false, "quiet": false, "source_freshness_run_project_hooks": true, "invocation_command": "dbt run --project-dir /app/dbt", "log_format_file": "debug", "project_dir": "/app/dbt", "show_all_deprecations": false, "macro_debugging": false}}
